import type { GetServerSideProps, NextPage } from 'next'
import Head from "next/head"
import Link from "next/link"

import { performance } from "perf_hooks"

import styles from "../styles/Home.module.css"

import { initializeApollo } from "@graphqlClient/client"
import { serverSideQuery } from "@graphqlServer/serverSideQuery"
import { GetAuthorDocument, useGetAuthorQuery } from "@gTypes/graphql-generated"

const SSR: NextPage = () => {
    const { data, loading } = useGetAuthorQuery({ variables: { id: "752" } })

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h2>This page was rendered using SSR</h2>
                <p>Look in <code>getServerSideProps</code> and change the <code>id</code> of the query to play with the cache</p>
                <p>{"Fetched author name: "}<code>{loading ? "...loading" : data?.getAuthor.name}</code></p>
                <p><Link href="/">Try a SSG page</Link></p>
            </main>
        </div>
    )
}

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
    const start = performance.now()
    const queryRes = await serverSideQuery({ query: GetAuthorDocument, variables: { id: "752" } }, { req, res })
    const end = performance.now()
    console.log(`Call to getServerSideProps using serverSideQuery took ${end - start} milliseconds`)
    return {
        props: {
            initialApolloState: queryRes.cache.extract()
        }
    }
}

/* export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
    const start = performance.now()
    const client = initializeApollo()
    const cache = await client.query({ query: GetAuthorDocument, variables: { id: "752" } })
    const end = performance.now()
    console.log(`Call to getServerSideProps using ApolloClient took ${end - start} milliseconds`)
    return {
        props: {
            initialApolloState: client.cache?.extract()
        }
    }
} */

export default SSR
