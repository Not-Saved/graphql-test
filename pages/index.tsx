import type { GetServerSideProps, GetStaticProps, NextPage } from 'next'
import Head from "next/head"

import { performance } from "perf_hooks"

import styles from "../styles/Home.module.css"

import { initializeApollo } from "@graphqlClient/client"
import { serverSideQuery } from "@graphqlServer/server"
import { GetAuthorDocument, useGetAuthorQuery } from "@gTypes/graphql-generated"

const Home: NextPage = () => {
	const { data, loading } = useGetAuthorQuery({ variables: { id: "752" } })

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main}>
				<h2>Look in <code>getServerSideProps</code></h2>
				<p>and change the id of the query to play with the cache</p>
				<div>{loading ? "LOADING DATA" : data?.getAuthor.name}</div>
			</main>
		</div>
	)
}

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
	const start = performance.now()
	const cache = await serverSideQuery({ query: GetAuthorDocument, variables: { id: "752" } }, { req, res })
	const end = performance.now()
	console.log(`Call to getServerSideProps using serverSideQuery took ${end - start} milliseconds`)
	return {
		props: {
			initialApolloState: cache?.extract()
		}
	}
}

/* export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
	const start = performance.now()
	const client = initializeApollo()
	const cache = await client.query({ query: GetAuthorDocument, variables: { id: "752" } })
	const end = performance.now()
	console.log(`Call to getServerSideProps using ApolloClient took ${end - start} milliseconds`)
	return {
		props: {
			initialApolloState: client.cache?.extract()
		}
	}
} */

export default Home
